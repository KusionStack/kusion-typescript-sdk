// This file is auto-generated by @hey-api/openapi-ts

export enum constant_RunStatus {
    RunStatusScheduling = 'Scheduling',
    RunStatusInProgress = 'InProgress',
    RunStatusFailed = 'Failed',
    RunStatusSucceeded = 'Succeeded',
    RunStatusCancelled = 'Cancelled',
    RunStatusQueued = 'Queued'
}

export enum constant_RunType {
    RunTypeGenerate = 'Generate',
    RunTypePreview = 'Preview',
    RunTypeApply = 'Apply',
    RunTypeDestroy = 'Destroy'
}

export enum constant_SourceProviderType {
    SourceProviderTypeGit = 'git',
    SourceProviderTypeGithub = 'github',
    SourceProviderTypeOCI = 'oci',
    SourceProviderTypeLocal = 'local'
}

export enum constant_StackState {
    StackStateUnSynced = 'UnSynced',
    StackStateSynced = 'Synced',
    StackStateOutOfSync = 'OutOfSync',
    StackStateCreating = 'Creating',
    StackStateGenerating = 'Generating',
    StackStateGenerateFailed = 'GenerateFailed',
    StackStateGenerated = 'Generated',
    StackStatePreviewing = 'Previewing',
    StackStatePreviewFailed = 'PreviewFailed',
    StackStatePreviewed = 'Previewed',
    StackStateApplying = 'Applying',
    StackStateApplyFailed = 'ApplyFailed',
    StackStateApplySucceeded = 'ApplySucceeded',
    StackStateDestroying = 'Destroying',
    StackStateDestroyFailed = 'DestroyFailed',
    StackStateDestroySucceeded = 'DestroySucceeded'
}

export type entity_Backend = {
    /**
     * // Type is the type of the backend.
     * Type string `yaml:"type" json:"type"`
     * Backend is the configuration of the backend.
     */
    backendConfig?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_BackendConfig);
    /**
     * CreationTimestamp is the timestamp of the created for the backend.
     */
    creationTimestamp?: string;
    /**
     * Description is a human-readable description of the backend.
     */
    description?: string;
    /**
     * ID is the id of the backend.
     */
    id?: number;
    /**
     * Name is the name of the backend.
     */
    name?: string;
    /**
     * UpdateTimestamp is the timestamp of the updated for the backend.
     */
    updateTimestamp?: string;
};

export type entity_Module = {
    /**
     * Description is a human-readable description of the module.
     */
    description?: string;
    /**
     * Doc is the documentation URL of the module.
     */
    doc?: (url_URL);
    /**
     * Name is the module name.
     */
    name?: string;
    /**
     * Owners is a list of owners for the module.
     */
    owners?: Array<(string)>;
    /**
     * URL is the module oci artifact registry URL.
     */
    url?: (url_URL);
};

export type entity_ModuleWithVersion = {
    /**
     * Description is a human-readable description of the module.
     */
    description?: string;
    /**
     * Doc is the documentation URL of the module.
     */
    doc?: (url_URL);
    /**
     * Name is the module name.
     */
    name?: string;
    /**
     * Owners is a list of owners for the module.
     */
    owners?: Array<(string)>;
    /**
     * URL is the module oci artifact registry URL.
     */
    url?: (url_URL);
    /**
     * Version is the module oci artifact version.
     */
    version?: string;
};

export type entity_Organization = {
    /**
     * CreationTimestamp is the timestamp of the created for the organization.
     */
    creationTimestamp?: string;
    /**
     * Description is a human-readable description of the organization.
     */
    description?: string;
    /**
     * DisplayName is the human-readable display name.
     */
    displayName?: string;
    /**
     * ID is the id of the organization.
     */
    id?: number;
    /**
     * Labels are custom labels associated with the organization.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the organization.
     */
    name?: string;
    /**
     * Owners is a list of owners for the organization.
     */
    owners?: Array<(string)>;
    /**
     * UpdateTimestamp is the timestamp of the updated for the organization.
     */
    updateTimestamp?: string;
};

export type entity_Project = {
    /**
     * CreationTimestamp is the timestamp of the created for the project.
     */
    creationTimestamp?: string;
    /**
     * Description is a human-readable description of the project.
     */
    description?: string;
    /**
     * DisplayName is the human-readable display name.
     */
    displayName?: string;
    /**
     * ID is the id of the project.
     */
    id?: number;
    /**
     * Labels are custom labels associated with the project.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the project.
     */
    name?: string;
    /**
     * Organization is the configuration source associated with the project.
     */
    organization?: (entity_Organization);
    /**
     * Owners is a list of owners for the project.
     */
    owners?: Array<(string)>;
    /**
     * Path is the relative path of the project within the sources.
     */
    path?: string;
    /**
     * Source is the configuration source associated with the project.
     */
    source?: (entity_Source);
    /**
     * UpdateTimestamp is the timestamp of the updated for the project.
     */
    updateTimestamp?: string;
};

export type entity_Resource = {
    /**
     * LastAppliedRevision is the revision of the last sync.
     */
    LastAppliedRevision?: string;
    /**
     * LastAppliedTimestamp is the timestamp of the last sync.
     */
    LastAppliedTimestamp?: string;
    /**
     * Attributes is the attributes of the resource.
     */
    attributes?: unknown;
    /**
     * CloudResourceID is the id of the resource in the cloud.
     */
    cloudResourceID?: string;
    /**
     * CreationTimestamp is the timestamp of the created for the resource.
     */
    creationTimestamp?: string;
    /**
     * DependsOn is the depends on of the resource.
     */
    dependsOn?: Array<(string)>;
    /**
     * Extensions is the extensions of the resource.
     */
    extensions?: unknown;
    /**
     * IAMResourceID is the id of the resource in IAM.
     */
    iamResourceID?: string;
    /**
     * ID is the id of the resource.
     */
    id?: number;
    /**
     * KusionResourceID is the id of the resource in Kusion.
     */
    kusionResourceID?: string;
    /**
     * Labels are custom labels associated with the resource.
     */
    labels?: Array<(string)>;
    /**
     * Owners is a list of owners for the resource.
     */
    owners?: Array<(string)>;
    /**
     * Provider is the provider of the resource.
     */
    provider?: string;
    /**
     * ResourceName is the name of the resource.
     */
    resourceName?: string;
    /**
     * ResourcePlane is the plane of the resource.
     */
    resourcePlane?: string;
    /**
     * ResourceType is the type of the resource.
     */
    resourceType?: string;
    /**
     * ResourceURN is the urn of the resource.
     */
    resourceURN?: string;
    /**
     * Stack is the stack associated with the resource.
     */
    stack?: (entity_Stack);
    /**
     * Status is the status of the resource.
     */
    status?: string;
    /**
     * UpdateTimestamp is the timestamp of the updated for the resource.
     */
    updateTimestamp?: string;
};

export type entity_ResourceGraph = {
    relations?: Array<entity_ResourceRelation>;
    resources?: {
        [key: string]: entity_ResourceInfo;
    };
    workload?: string;
};

export type entity_ResourceInfo = {
    /**
     * CloudResourceID is the id of the resource in the cloud.
     */
    cloudResourceID?: string;
    /**
     * IAMResourceID is the id of the resource in IAM.
     */
    iamResourceID?: string;
    /**
     * ResourceName is the name of the resource.
     */
    resourceName?: string;
    /**
     * ResourcePlane is the plane of the resource.
     */
    resourcePlane?: string;
    /**
     * ResourceType is the type of the resource.
     */
    resourceType?: string;
    /**
     * Status is the status of the resource.
     */
    status?: string;
};

export type entity_ResourceRelation = {
    dependencyResource?: string;
    dependentResource?: string;
};

export type entity_Run = {
    /**
     * CreationTimestamp is the timestamp of the created for the run.
     */
    creationTimestamp?: string;
    /**
     * ID is the id of the run.
     */
    id?: number;
    /**
     * Logs is the logs of the run.
     */
    logs?: string;
    /**
     * Result is the result of the run.
     */
    result?: string;
    /**
     * Stack is the stack of the run.
     */
    stack?: (entity_Stack);
    /**
     * Status is the status of the run.
     */
    status?: (constant_RunStatus);
    /**
     * Trace is the trace of the run.
     */
    trace?: string;
    /**
     * RunType is the type of the run provider.
     */
    type?: (constant_RunType);
    /**
     * UpdateTimestamp is the timestamp of the updated for the run.
     */
    updateTimestamp?: string;
    /**
     * Workspace is the target workspace of the run.
     */
    workspace?: string;
};

export type entity_Source = {
    /**
     * CreationTimestamp is the timestamp of the created for the source.
     */
    creationTimestamp?: string;
    /**
     * Description is a human-readable description of the source.
     */
    description?: string;
    /**
     * ID is the id of the source.
     */
    id?: number;
    /**
     * Labels are custom labels associated with the source.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the source.
     */
    name?: string;
    /**
     * Owners is a list of owners for the source.
     */
    owners?: Array<(string)>;
    /**
     * Remote is the source URL, including scheme.
     */
    remote?: (url_URL);
    /**
     * SourceProvider is the type of the source provider.
     */
    sourceProvider?: (constant_SourceProviderType);
    /**
     * UpdateTimestamp is the timestamp of the updated for the source.
     */
    updateTimestamp?: string;
};

export type entity_Stack = {
    /**
     * CreationTimestamp is the timestamp of the created for the stack.
     */
    creationTimestamp?: string;
    /**
     * Description is a human-readable description of the stack.
     */
    description?: string;
    /**
     * Desired is the desired version of stack.
     */
    desiredVersion?: string;
    /**
     * DisplayName is the human-readable display nams.
     */
    displayName?: string;
    /**
     * ID is the id of the stack.
     */
    id?: number;
    /**
     * Labels are custom labels associated with the stack.
     */
    labels?: Array<(string)>;
    /**
     * LastAppliedRevision is the spec ID of the last apply operation for the stack.
     */
    lastAppliedRevision?: string;
    /**
     * LastAppliedTimestamp is the timestamp of the last apply operation for the stack.
     */
    lastAppliedTimestamp?: string;
    /**
     * LastGeneratedRevision is the spec ID of the last generate operation for the stack.
     */
    lastGeneratedRevision?: string;
    /**
     * LastPreviewedRevision is the spec ID of the last preview operation for the stack.
     */
    lastPreviewedRevision?: string;
    /**
     * Name is the name of the stack.
     */
    name?: string;
    /**
     * Owners is a list of owners for the stack.
     */
    owners?: Array<(string)>;
    /**
     * Path is the relative path of the stack within the sourcs.
     */
    path?: string;
    /**
     * Project is the project associated with the stack.
     */
    project?: (entity_Project);
    /**
     * SyncState is the current state of the stack.
     */
    syncState?: (constant_StackState);
    /**
     * Type is the type of the stack.
     */
    type?: string;
    /**
     * UpdateTimestamp is the timestamp of the updated for the stack.
     */
    updateTimestamp?: string;
};

export type entity_Workspace = {
    /**
     * Backend is the corresponding backend for this workspace.
     */
    backend?: (entity_Backend);
    /**
     * CreationTimestamp is the timestamp of the created for the workspace.
     */
    creationTimestamp?: string;
    /**
     * Description is a human-readable description of the workspace.
     */
    description?: string;
    /**
     * DisplayName is the human-readable display name.
     */
    displayName?: string;
    /**
     * ID is the id of the workspace.
     */
    id?: number;
    /**
     * Labels are custom labels associated with the workspace.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the workspace.
     */
    name?: string;
    /**
     * Owners is a list of owners for the workspace.
     */
    owners?: Array<(string)>;
    /**
     * UpdateTimestamp is the timestamp of the updated for the workspace.
     */
    updateTimestamp?: string;
};

export enum handler_Duration {
    minDuration = -9223372036854776000,
    maxDuration = 9223372036854776000,
    Nanosecond = 1,
    Microsecond = 1000,
    Millisecond = 1000000,
    Second = 1000000000,
    Minute = 60000000000,
    Hour = 3600000000000
}

export type handler_Response = {
    /**
     * Time taken for the request.
     */
    costTime?: (handler_Duration);
    /**
     * Data payload.
     */
    data?: unknown;
    /**
     * Request end time.
     */
    endTime?: string;
    /**
     * Descriptive message.
     */
    message?: string;
    /**
     * Request start time.
     */
    startTime?: string;
    /**
     * Indicates success status.
     */
    success?: boolean;
    /**
     * Trace identifier.
     */
    traceID?: string;
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_AlicloudProvider = {
    /**
     * Alicloud Region to be used to interact with Alicloud Secrets Manager.
     * Examples are cn-beijing, cn-shanghai, etc.
     */
    region?: string;
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_AWSProvider = {
    /**
     * The profile to be used to interact with AWS Secrets Manager.
     * If not set, the default profile created with `aws configure` will be used.
     */
    profile?: string;
    /**
     * AWS Region to be used to interact with AWS Secrets Manager.
     * Examples are us-east-1, us-west-2, etc.
     */
    region?: string;
};

export enum kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_AzureEnvironmentType {
    AzureEnvironmentPublicCloud = 'PublicCloud',
    AzureEnvironmentUSGovernmentCloud = 'USGovernmentCloud',
    AzureEnvironmentChinaCloud = 'ChinaCloud',
    AzureEnvironmentGermanCloud = 'GermanCloud'
}

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_AzureKVProvider = {
    /**
     * EnvironmentType specifies the Azure cloud environment endpoints to use for connecting and authenticating with Azure.
     * By-default it points to the public cloud AAD endpoint, and the following endpoints are available:
     * PublicCloud, USGovernmentCloud, ChinaCloud, GermanCloud
     * Ref: https://github.com/Azure/go-autorest/blob/main/autorest/azure/environments.go#L152
     */
    environmentType?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_AzureEnvironmentType);
    /**
     * TenantID configures the Azure Tenant to send requests to.
     */
    tenantId?: string;
    /**
     * Vault Url from which the secrets to be fetched from.
     */
    vaultUrl?: string;
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_BackendConfig = {
    /**
     * Configs contains config items of the backend, whose keys differ from different backend types.
     */
    configs?: {
        [key: string]: unknown;
    };
    /**
     * Type is the backend type, supports BackendTypeLocal, BackendTypeOss, BackendTypeS3.
     */
    type?: string;
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_Configs = {
    /**
     * Default is default block of the module config.
     */
    default?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_GenericConfig);
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_FakeProvider = {
    data?: Array<kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_FakeProviderData>;
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_FakeProviderData = {
    key?: string;
    value?: string;
    valueMap?: {
        [key: string]: (string);
    };
    version?: string;
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_GenericConfig = {
    [key: string]: unknown;
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_ModuleConfig = {
    /**
     * Configs contains all levels of module configs
     */
    configs?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_Configs);
    /**
     * Path is the path of the module. It can be a local path or a remote URL
     */
    path?: string;
    /**
     * Version is the version of the module.
     */
    version?: string;
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_ModuleConfigs = {
    [key: string]: kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_ModuleConfig;
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_ModulePatcherConfig = {
    /**
     * ProjectSelector contains the selected projects.
     */
    projectSelector?: Array<(string)>;
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_OnPremisesProvider = {
    /**
     * attributes of the provider
     */
    attributes?: {
        [key: string]: (string);
    };
    /**
     * platform name of the provider
     */
    name?: string;
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_ProviderSpec = {
    /**
     * Alicloud configures a store to retrieve secrets from Alicloud Secrets Manager.
     */
    alicloud?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_AlicloudProvider);
    /**
     * AWS configures a store to retrieve secrets from AWS Secrets Manager.
     */
    aws?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_AWSProvider);
    /**
     * Azure configures a store to retrieve secrets from Azure KeyVault.
     */
    azure?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_AzureKVProvider);
    /**
     * Fake configures a store with static key/value pairs
     */
    fake?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_FakeProvider);
    /**
     * Onprem configures a store in on-premises environments
     */
    onpremises?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_OnPremisesProvider);
    /**
     * Vault configures a store to retrieve secrets from HashiCorp Vault.
     */
    vault?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_VaultProvider);
    /**
     * ViettelCloud configures a store to retrieve secrets from ViettelCloud Secrets Manager.
     */
    viettelcloud?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_ViettelCloudProvider);
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_Resource = {
    /**
     * Attributes represents all specified attributes of this resource
     */
    attributes?: unknown;
    /**
     * DependsOn contains all resources this resource depends on
     */
    dependsOn?: Array<(string)>;
    /**
     * Extensions specifies arbitrary metadata of this resource
     */
    extensions?: unknown;
    /**
     * ID is the unique key of this resource.
     * ApiVersion:Kind:Namespace:Name is an idiomatic way for Kubernetes resources.
     * providerNamespace:providerName:resourceType:resourceName for Terraform resources
     */
    id?: string;
    /**
     * Type represents all Context we supported like Kubernetes and Terraform
     */
    type?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_Type);
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_SecretStore = {
    provider?: kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_ProviderSpec;
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_Spec = {
    /**
     * Context contains workspace-level configurations, such as runtimes, topologies, and metadata, etc.
     */
    context?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_GenericConfig);
    /**
     * Resources is the list of Resource this Spec contains.
     */
    resources?: Array<kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_Resource>;
    /**
     * SecretSore represents a external secret store location for storing secrets.
     */
    secretStore?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_SecretStore);
};

export enum kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_Type {
    Kubernetes = 'Kubernetes',
    Terraform = 'Terraform'
}

export enum kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_VaultKVStoreVersion {
    VaultKVStoreV1 = 'v1',
    VaultKVStoreV2 = 'v2'
}

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_VaultProvider = {
    /**
     * Path is the mount path of the Vault KV backend endpoint, e.g: "secret".
     */
    path?: string;
    /**
     * Server is the target Vault server address to connect, e.g: "https://vault.example.com:8200".
     */
    server?: string;
    /**
     * Version is the Vault KV secret engine version. Version can be either "v1" or
     * "v2", defaults to "v2".
     */
    version?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_VaultKVStoreVersion);
};

export type kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_ViettelCloudProvider = {
    /**
     * ViettelCloud CMP URL to be used to interact with ViettelCloud Secrets Manager.
     * Examples are https://console.viettelcloud.vn/api/
     */
    cmpURL?: string;
    /**
     * ProjectID to be used to interact with ViettelCloud Secrets Manager.
     */
    projectID?: string;
};

export enum models_ActionType {
    Undefined = 0,
    UnChanged = 1,
    Create = 2,
    Update = 3,
    Delete = 4
}

export type models_Changes = {
    changeSteps?: {
        [key: string]: models_ChangeStep;
    };
    stepKeys?: Array<(string)>;
};

export type models_ChangeStep = {
    /**
     * the operation performed by this step
     */
    action?: (models_ActionType);
    /**
     * old data
     */
    from?: unknown;
    /**
     * the resource id
     */
    id?: string;
    /**
     * new data
     */
    to?: unknown;
};

export type request_CreateBackendRequest = {
    /**
     * BackendConfig is the configuration of the backend.
     */
    backendConfig?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_BackendConfig);
    /**
     * Description is a human-readable description of the backend.
     */
    description?: string;
    /**
     * Name is the name of the backend.
     */
    name: string;
};

export type request_CreateModuleRequest = {
    /**
     * Description is a human-readable description of the module.
     */
    description?: string;
    /**
     * Doc is the documentation URL of the module.
     */
    doc?: string;
    /**
     * Name is the module name.
     */
    name: string;
    /**
     * Owners is a list of owners for the module.
     */
    owners?: Array<(string)>;
    /**
     * URL is the module oci artifact registry URL.
     */
    url: string;
};

export type request_CreateOrganizationRequest = {
    /**
     * Description is a human-readable description of the organization.
     */
    description?: string;
    /**
     * Labels are custom labels associated with the organization.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the organization.
     */
    name?: string;
    /**
     * Owners is a list of owners for the organization.
     */
    owners: Array<(string)>;
};

export type request_CreateProjectRequest = {
    /**
     * Description is a human-readable description of the project.
     */
    description?: string;
    /**
     * Domain is the domain of the project, typically serving as the parent folder name for the project.
     */
    domain: string;
    /**
     * Labels are custom labels associated with the project.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the project.
     */
    name?: string;
    /**
     * OrganizationID is the organization id associated with the project.
     */
    organizationID?: number;
    /**
     * Owners is a list of owners for the project.
     */
    owners?: Array<(string)>;
    /**
     * Path is the relative path of the project within the sources.
     */
    path?: string;
    /**
     * SourceID is the configuration source id associated with the project.
     */
    sourceID?: number;
};

export type request_CreateSourceRequest = {
    /**
     * Description is a human-readable description of the source.
     */
    description?: string;
    /**
     * Labels are custom labels associated with the source.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the source.
     */
    name: string;
    /**
     * Owners is a list of owners for the source.
     */
    owners?: Array<(string)>;
    /**
     * Remote is the source URL, including scheme.
     */
    remote: string;
    /**
     * SourceProvider is the type of the source provider.
     */
    sourceProvider: string;
};

export type request_CreateStackRequest = {
    /**
     * Description is a human-readable description of the stack.
     */
    description?: string;
    /**
     * DesiredVersion is the desired revision of stack.
     */
    desiredVersion?: string;
    /**
     * Labels are custom labels associated with the stack.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the stack.
     */
    name: string;
    /**
     * Owners is a list of owners for the stack.
     */
    owners?: Array<(string)>;
    /**
     * Path is the relative path of the stack within the source.
     */
    path?: string;
    /**
     * ProjectID is the project id of the stack within the source.
     */
    projectID?: number;
    /**
     * ProjectName is the project name of the stack within the source.
     */
    projectName?: string;
    /**
     * Type is the type of the stack.
     */
    type?: string;
};

export type request_CreateWorkspaceRequest = {
    /**
     * BackendID is the configuration backend id associated with the workspace.
     */
    backendID: number;
    /**
     * Description is a human-readable description of the workspace.
     */
    description?: string;
    /**
     * Labels are custom labels associated with the workspace.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the workspace.
     */
    name: string;
    /**
     * Owners is a list of owners for the workspace.
     */
    owners: Array<(string)>;
};

export type request_StackImportRequest = {
    importedResources?: {
        [key: string]: (string);
    };
};

export type request_UpdateBackendRequest = {
    /**
     * BackendConfig is the configuration of the backend.
     */
    backendConfig?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_BackendConfig);
    /**
     * Description is a human-readable description of the backend.
     */
    description?: string;
    /**
     * ID is the id of the backend.
     */
    id: number;
    /**
     * Name is the name of the backend.
     */
    name: string;
};

export type request_UpdateModuleRequest = {
    /**
     * Description is a human-readable description of the module.
     */
    description?: string;
    /**
     * Doc is the documentation URL of the module.
     */
    doc?: string;
    /**
     * Name is the module name.
     */
    name: string;
    /**
     * Owners is a list of owners for the module.
     */
    owners?: Array<(string)>;
    /**
     * URL is the module oci artifact registry URL.
     */
    url?: string;
};

export type request_UpdateOrganizationRequest = {
    /**
     * Description is a human-readable description of the organization.
     */
    description?: string;
    /**
     * ID is the id of the organization.
     */
    id: number;
    /**
     * Labels are custom labels associated with the organization.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the organization.
     */
    name?: string;
    /**
     * Owners is a list of owners for the organization.
     */
    owners: Array<(string)>;
};

export type request_UpdateProjectRequest = {
    /**
     * Description is a human-readable description of the project.
     */
    description?: string;
    /**
     * Domain is the domain of the project, typically serving as the parent folder name for the project.
     */
    domain: string;
    /**
     * ID is the id of the project.
     */
    id: number;
    /**
     * Labels are custom labels associated with the project.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the project.
     */
    name?: string;
    /**
     * OrganizationID is the organization id associated with the project.
     */
    organizationID?: number;
    /**
     * Owners is a list of owners for the project.
     */
    owners?: Array<(string)>;
    /**
     * Path is the relative path of the project within the sources.
     */
    path?: string;
    /**
     * SourceID is the configuration source id associated with the project.
     */
    sourceID?: number;
};

export type request_UpdateSourceRequest = {
    /**
     * Description is a human-readable description of the source.
     */
    description?: string;
    /**
     * ID is the id of the source.
     */
    id: number;
    /**
     * Labels are custom labels associated with the source.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the source.
     */
    name: string;
    /**
     * Owners is a list of owners for the source.
     */
    owners?: Array<(string)>;
    /**
     * Remote is the source URL, including scheme.
     */
    remote: string;
    /**
     * SourceProvider is the type of the source provider.
     */
    sourceProvider: string;
};

export type request_UpdateStackRequest = {
    /**
     * Description is a human-readable description of the stack.
     */
    description?: string;
    /**
     * DesiredVersion is the desired revision of stack.
     */
    desiredVersion?: string;
    /**
     * ID is the id of the stack.
     */
    id: number;
    /**
     * Labels are custom labels associated with the stack.
     */
    labels?: Array<(string)>;
    /**
     * Name is the name of the stack.
     */
    name: string;
    /**
     * Owners is a list of owners for the stack.
     */
    owners?: Array<(string)>;
    /**
     * Path is the relative path of the stack within the source.
     */
    path?: string;
    /**
     * ProjectID is the project id of the stack within the source.
     */
    projectID?: number;
    /**
     * ProjectName is the project name of the stack within the source.
     */
    projectName?: string;
    /**
     * Type is the type of the stack.
     */
    type?: string;
};

export type request_UpdateWorkspaceRequest = {
    /**
     * BackendID is the configuration backend id associated with the workspace.
     */
    backendID: number;
    /**
     * Description is a human-readable description of the workspace.
     */
    description?: string;
    /**
     * ID is the id of the workspace.
     */
    id: number;
    /**
     * Labels are custom labels associated with the workspace.
     */
    labels?: {
        [key: string]: (string);
    };
    /**
     * Name is the name of the workspace.
     */
    name?: string;
    /**
     * Owners is a list of owners for the workspace.
     */
    owners: Array<(string)>;
};

export type request_WorkspaceConfigs = {
    /**
     * Context contains workspace-level configurations, such as runtimes, topologies, and metadata, etc.
     */
    context?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_GenericConfig);
    /**
     * Modules are the configs of a set of modules.
     */
    modules?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_ModuleConfigs);
    /**
     * SecretStore represents a secure external location for storing secrets.
     */
    secretStore?: (kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_SecretStore);
};

export type response_PaginatedBackendResponse = {
    backends?: Array<entity_Backend>;
    currentPage?: number;
    pageSize?: number;
    total?: number;
};

export type response_PaginatedModuleResponse = {
    currentPage?: number;
    modules?: Array<entity_Module>;
    modulesWithVersion?: Array<entity_ModuleWithVersion>;
    pageSize?: number;
    total?: number;
};

export type response_PaginatedOrganizationResponse = {
    currentPage?: number;
    organizations?: Array<entity_Organization>;
    pageSize?: number;
    total?: number;
};

export type response_PaginatedProjectResponse = {
    currentPage?: number;
    pageSize?: number;
    projects?: Array<entity_Project>;
    total?: number;
};

export type response_PaginatedResourceResponse = {
    currentPage?: number;
    pageSize?: number;
    resources?: Array<entity_Resource>;
    total?: number;
};

export type response_PaginatedRunResponse = {
    currentPage?: number;
    pageSize?: number;
    runs?: Array<entity_Run>;
    total?: number;
};

export type response_PaginatedSourceResponse = {
    currentPage?: number;
    pageSize?: number;
    sources?: Array<entity_Source>;
    total?: number;
};

export type response_PaginatedStackResponse = {
    currentPage?: number;
    pageSize?: number;
    stacks?: Array<entity_Stack>;
    total?: number;
};

export type response_PaginatedWorkspaceResponse = {
    currentPage?: number;
    pageSize?: number;
    total?: number;
    workspaces?: Array<entity_Workspace>;
};

export type url_URL = {
    /**
     * append a query ('?') even if RawQuery is empty
     */
    forceQuery?: boolean;
    /**
     * fragment for references, without '#'
     */
    fragment?: string;
    /**
     * host or host:port (see Hostname and Port methods)
     */
    host?: string;
    /**
     * do not emit empty host (authority)
     */
    omitHost?: boolean;
    /**
     * encoded opaque data
     */
    opaque?: string;
    /**
     * path (relative paths may omit leading slash)
     */
    path?: string;
    /**
     * encoded fragment hint (see EscapedFragment method)
     */
    rawFragment?: string;
    /**
     * encoded path hint (see EscapedPath method)
     */
    rawPath?: string;
    /**
     * encoded query values, without '?'
     */
    rawQuery?: string;
    scheme?: string;
    /**
     * username and password information
     */
    user?: (url_Userinfo);
};

export type url_Userinfo = unknown;

export type ListBackendData = {
    query?: {
        /**
         * The current page to fetch. Default to 1
         */
        page?: number;
        /**
         * The size of the page. Default to 10
         */
        pageSize?: number;
    };
};

export type ListBackendResponse = ((handler_Response & {
    data?: response_PaginatedBackendResponse;
}));

export type ListBackendError = (unknown);

export type CreateBackendData = {
    /**
     * Created backend
     */
    body: request_CreateBackendRequest;
};

export type CreateBackendResponse = ((handler_Response & {
    data?: entity_Backend;
}));

export type CreateBackendError = (unknown);

export type DeleteBackendData = {
    path: {
        /**
         * Backend ID
         */
        backendID: number;
    };
};

export type DeleteBackendResponse = ((handler_Response & {
    data?: string;
}));

export type DeleteBackendError = (unknown);

export type GetBackendData = {
    path: {
        /**
         * Backend ID
         */
        backendID: number;
    };
};

export type GetBackendResponse = ((handler_Response & {
    data?: entity_Backend;
}));

export type GetBackendError = (unknown);

export type UpdateBackendData = {
    /**
     * Updated backend
     */
    body: request_UpdateBackendRequest;
    path: {
        /**
         * Backend ID
         */
        backendID: number;
    };
};

export type UpdateBackendResponse = ((handler_Response & {
    data?: entity_Backend;
}));

export type UpdateBackendError = (unknown);

export type GetEndpointsResponse = (string);

export type GetEndpointsError = unknown;

export type ListModuleData = {
    query?: {
        /**
         * Module name to filter module list by. Default to all modules.
         */
        moduleName?: string;
        /**
         * The current page to fetch. Default to 1
         */
        page?: number;
        /**
         * The size of the page. Default to 10
         */
        pageSize?: number;
        /**
         * Workspace ID to filter module list by. Default to all workspaces.
         */
        workspaceID?: number;
    };
};

export type ListModuleResponse = ((handler_Response & {
    data?: response_PaginatedModuleResponse;
}));

export type ListModuleError = (unknown);

export type CreateModuleData = {
    /**
     * Created module
     */
    body: request_CreateModuleRequest;
};

export type CreateModuleResponse = ((handler_Response & {
    data?: entity_Module;
}));

export type CreateModuleError = (unknown);

export type DeleteModuleData = {
    path: {
        /**
         * Module Name
         */
        moduleName: string;
    };
};

export type DeleteModuleResponse = ((handler_Response & {
    data?: string;
}));

export type DeleteModuleError = (unknown);

export type GetModuleData = {
    path: {
        /**
         * Module Name
         */
        moduleName: string;
    };
};

export type GetModuleResponse = ((handler_Response & {
    data?: entity_Module;
}));

export type GetModuleError = (unknown);

export type UpdateModuleData = {
    /**
     * Updated module
     */
    body: request_UpdateModuleRequest;
    path: {
        /**
         * Module Name
         */
        moduleName: string;
    };
};

export type UpdateModuleResponse = ((handler_Response & {
    data?: entity_Module;
}));

export type UpdateModuleError = (unknown);

export type ListOrganizationData = {
    query?: {
        /**
         * The current page to fetch. Default to 1
         */
        page?: number;
        /**
         * The size of the page. Default to 10
         */
        pageSize?: number;
    };
};

export type ListOrganizationResponse = ((handler_Response & {
    data?: response_PaginatedOrganizationResponse;
}));

export type ListOrganizationError = (unknown);

export type CreateOrganizationData = {
    /**
     * Created organization
     */
    body: request_CreateOrganizationRequest;
};

export type CreateOrganizationResponse = ((handler_Response & {
    data?: entity_Organization;
}));

export type CreateOrganizationError = (unknown);

export type DeleteOrganizationData = {
    path: {
        /**
         * Organization ID
         */
        orgID: number;
    };
};

export type DeleteOrganizationResponse = ((handler_Response & {
    data?: string;
}));

export type DeleteOrganizationError = (unknown);

export type GetOrganizationData = {
    path: {
        /**
         * Organization ID
         */
        orgID: number;
    };
};

export type GetOrganizationResponse = ((handler_Response & {
    data?: entity_Organization;
}));

export type GetOrganizationError = (unknown);

export type UpdateOrganizationData = {
    /**
     * Updated organization
     */
    body: request_UpdateOrganizationRequest;
    path: {
        /**
         * Organization ID
         */
        orgID: number;
    };
};

export type UpdateOrganizationResponse = ((handler_Response & {
    data?: entity_Organization;
}));

export type UpdateOrganizationError = (unknown);

export type ListProjectData = {
    query?: {
        /**
         * Project name to filter project list by. This should only return one result if set.
         */
        name?: string;
        /**
         * OrganizationID to filter project list by. Default to all projects.
         */
        orgID?: number;
        /**
         * The current page to fetch. Default to 1
         */
        page?: number;
        /**
         * The size of the page. Default to 10
         */
        pageSize?: number;
    };
};

export type ListProjectResponse = ((handler_Response & {
    data?: Array<response_PaginatedProjectResponse>;
}));

export type ListProjectError = (unknown);

export type CreateProjectData = {
    /**
     * Created project
     */
    body: request_CreateProjectRequest;
};

export type CreateProjectResponse = ((handler_Response & {
    data?: entity_Project;
}));

export type CreateProjectError = (unknown);

export type DeleteProjectData = {
    path: {
        /**
         * Project ID
         */
        projectID: number;
    };
};

export type DeleteProjectResponse = ((handler_Response & {
    data?: string;
}));

export type DeleteProjectError = (unknown);

export type GetProjectData = {
    path: {
        /**
         * Project ID
         */
        projectID: number;
    };
};

export type GetProjectResponse = ((handler_Response & {
    data?: entity_Project;
}));

export type GetProjectError = (unknown);

export type UpdateProjectData = {
    /**
     * Updated project
     */
    body: request_UpdateProjectRequest;
    path: {
        /**
         * Project ID
         */
        projectID: number;
    };
};

export type UpdateProjectResponse = ((handler_Response & {
    data?: entity_Project;
}));

export type UpdateProjectError = (unknown);

export type ListResourceData = {
    query?: {
        /**
         * The organization ID
         */
        orgID?: number;
        /**
         * The current page to fetch. Default to 1
         */
        page?: number;
        /**
         * The size of the page. Default to 10
         */
        pageSize?: number;
        /**
         * The project ID
         */
        projectID?: number;
        /**
         * The resource plane
         */
        resourcePlane?: string;
        /**
         * The resource type
         */
        resourceType?: string;
        /**
         * The stack ID
         */
        stackID?: number;
    };
};

export type ListResourceResponse = ((handler_Response & {
    data?: Array<response_PaginatedResourceResponse>;
}));

export type ListResourceError = (unknown);

export type GetResourceData = {
    path: {
        /**
         * Resource ID
         */
        resourceID: number;
    };
};

export type GetResourceResponse = ((handler_Response & {
    data?: entity_Resource;
}));

export type GetResourceError = (unknown);

export type GetResourceGraphData = {
    query: {
        /**
         * Stack ID
         */
        stackID: number;
    };
};

export type GetResourceGraphResponse = ((handler_Response & {
    data?: entity_ResourceGraph;
}));

export type GetResourceGraphError = (unknown);

export type GetRunData = {
    path: {
        /**
         * Run ID
         */
        runID: number;
    };
};

export type GetRunResponse = ((handler_Response & {
    data?: entity_Run;
}));

export type GetRunError = (unknown);

export type GetRunResultData = {
    path: {
        /**
         * Run ID
         */
        runID: number;
    };
};

export type GetRunResultResponse = ((handler_Response & {
    data?: unknown;
}));

export type GetRunResultError = (unknown);

export type ListSourceData = {
    query?: {
        /**
         * The current page to fetch. Default to 1
         */
        page?: number;
        /**
         * The size of the page. Default to 10
         */
        pageSize?: number;
        /**
         * Source name to filter source list by. Default to all sources.
         */
        sourceName?: string;
    };
};

export type ListSourceResponse = ((handler_Response & {
    data?: response_PaginatedSourceResponse;
}));

export type ListSourceError = (unknown);

export type CreateSourceData = {
    /**
     * Created source
     */
    body: request_CreateSourceRequest;
};

export type CreateSourceResponse = ((handler_Response & {
    data?: entity_Source;
}));

export type CreateSourceError = (unknown);

export type DeleteSourceData = {
    path: {
        /**
         * Source ID
         */
        sourceID: number;
    };
};

export type DeleteSourceResponse = ((handler_Response & {
    data?: string;
}));

export type DeleteSourceError = (unknown);

export type GetSourceData = {
    path: {
        /**
         * Source ID
         */
        sourceID: number;
    };
};

export type GetSourceResponse = ((handler_Response & {
    data?: entity_Source;
}));

export type GetSourceError = (unknown);

export type UpdateSourceData = {
    /**
     * Updated source
     */
    body: request_UpdateSourceRequest;
    path: {
        /**
         * Source ID
         */
        sourceID: number;
    };
};

export type UpdateSourceResponse = ((handler_Response & {
    data?: entity_Source;
}));

export type UpdateSourceError = (unknown);

export type ListRunData = {
    query?: {
        /**
         * EndTime to filter runs by. Default to all. Format: RFC3339
         */
        endTime?: string;
        /**
         * The current page to fetch. Default to 1
         */
        page?: number;
        /**
         * The size of the page. Default to 10
         */
        pageSize?: number;
        /**
         * ProjectID to filter runs by. Default to all
         */
        projectID?: number;
        /**
         * StackID to filter runs by. Default to all
         */
        stackID?: number;
        /**
         * StartTime to filter runs by. Default to all. Format: RFC3339
         */
        startTime?: string;
        /**
         * RunStatus to filter runs by. Default to all
         */
        status?: Array<string>;
        /**
         * RunType to filter runs by. Default to all
         */
        type?: Array<string>;
        /**
         * Workspace to filter runs by. Default to all
         */
        workspace?: string;
    };
};

export type ListRunResponse = ((handler_Response & {
    data?: response_PaginatedRunResponse;
}));

export type ListRunError = (unknown);

export type ListStackData = {
    query?: {
        /**
         * OrgID to filter stacks by. Default to all
         */
        orgID?: number;
        /**
         * The current page to fetch. Default to 1
         */
        page?: number;
        /**
         * The size of the page. Default to 10
         */
        pageSize?: number;
        /**
         * Path to filter stacks by. Default to all
         */
        path?: string;
        /**
         * ProjectID to filter stacks by. Default to all
         */
        projectID?: number;
        /**
         * ProjectName to filter stacks by. Default to all
         */
        projectName?: string;
    };
};

export type ListStackResponse = ((handler_Response & {
    data?: response_PaginatedStackResponse;
}));

export type ListStackError = (unknown);

export type CreateStackData = {
    /**
     * Created stack
     */
    body: request_CreateStackRequest;
    query?: {
        /**
         * Whether to create an AppConfig from template when creating the stack
         */
        fromTemplate?: boolean;
        /**
         * Whether to initialize an AppTopology from template when creating the stack
         */
        initTopology?: boolean;
    };
};

export type CreateStackResponse = ((handler_Response & {
    data?: entity_Stack;
}));

export type CreateStackError = (unknown);

export type DeleteStackData = {
    path: {
        /**
         * Stack ID
         */
        stackID: number;
    };
};

export type DeleteStackResponse = ((handler_Response & {
    data?: string;
}));

export type DeleteStackError = (unknown);

export type GetStackData = {
    path: {
        /**
         * Stack ID
         */
        stackID: number;
    };
};

export type GetStackResponse = ((handler_Response & {
    data?: entity_Stack;
}));

export type GetStackError = (unknown);

export type UpdateStackData = {
    /**
     * Updated stack
     */
    body: request_UpdateStackRequest;
    path: {
        /**
         * Stack ID
         */
        stackID: number;
    };
};

export type UpdateStackResponse = ((handler_Response & {
    data?: entity_Stack;
}));

export type UpdateStackError = (unknown);

export type ApplyStackData = {
    /**
     * The resources to import during the stack preview
     */
    body?: request_StackImportRequest;
    path: {
        /**
         * Stack ID
         */
        stackID: number;
    };
    query: {
        /**
         * Apply in dry-run mode
         */
        dryrun?: boolean;
        /**
         * Force the apply even when the stack is locked. May cause concurrency issues!!!
         */
        force?: boolean;
        /**
         * Import existing resources during the stack preview
         */
        importResources?: boolean;
        /**
         * The Spec ID to use for the apply. Will generate a new spec if omitted.
         */
        specID?: string;
        /**
         * The target workspace to preview the spec in.
         */
        workspace: string;
    };
};

export type ApplyStackResponse = ((handler_Response & {
    data?: string;
}));

export type ApplyStackError = (unknown);

export type ApplyStackAsyncData = {
    /**
     * The resources to import during the stack preview
     */
    body?: request_StackImportRequest;
    path: {
        /**
         * Stack ID
         */
        stackID: number;
    };
    query: {
        /**
         * Apply in dry-run mode
         */
        dryrun?: boolean;
        /**
         * Force the apply even when the stack is locked. May cause concurrency issues!!!
         */
        force?: boolean;
        /**
         * Import existing resources during the stack preview
         */
        importResources?: boolean;
        /**
         * The Spec ID to use for the apply. Will generate a new spec if omitted.
         */
        specID?: string;
        /**
         * The target workspace to preview the spec in.
         */
        workspace: string;
    };
};

export type ApplyStackAsyncResponse = ((handler_Response & {
    data?: entity_Run;
}));

export type ApplyStackAsyncError = (unknown);

export type DestroyStackData = {
    path: {
        /**
         * Stack ID
         */
        stackID: number;
    };
    query: {
        /**
         * Destroy in dry-run mode
         */
        dryrun?: boolean;
        /**
         * Force the destroy even when the stack is locked. May cause concurrency issues!!!
         */
        force?: boolean;
        /**
         * The target workspace to preview the spec in.
         */
        workspace: string;
    };
};

export type DestroyStackResponse = ((handler_Response & {
    data?: string;
}));

export type DestroyStackError = (unknown);

export type DestroyStackAsyncData = {
    path: {
        /**
         * Stack ID
         */
        stackID: number;
    };
    query: {
        /**
         * Destroy in dry-run mode
         */
        dryrun?: boolean;
        /**
         * Force the destroy even when the stack is locked. May cause concurrency issues!!!
         */
        force?: boolean;
        /**
         * The target workspace to preview the spec in.
         */
        workspace: string;
    };
};

export type DestroyStackAsyncResponse = ((handler_Response & {
    data?: entity_Run;
}));

export type DestroyStackAsyncError = (unknown);

export type GenerateStackData = {
    path: {
        /**
         * Stack ID
         */
        stackID: number;
    };
    query: {
        /**
         * Force the generate even when the stack is locked
         */
        force?: boolean;
        /**
         * The format to generate the spec in. Choices are: spec. Default to spec.
         */
        format?: string;
        /**
         * The target workspace to preview the spec in.
         */
        workspace: string;
    };
};

export type GenerateStackResponse = ((handler_Response & {
    data?: kusionstack_io_kusion_pkg_apis_api_kusion_io_v1_Spec;
}));

export type GenerateStackError = (unknown);

export type GenerateStackAsyncData = {
    path: {
        /**
         * Stack ID
         */
        stackID: number;
    };
    query: {
        /**
         * Force the generate even when the stack is locked
         */
        force?: boolean;
        /**
         * The format to generate the spec in. Choices are: spec. Default to spec.
         */
        format?: string;
        /**
         * The target workspace to preview the spec in.
         */
        workspace: string;
    };
};

export type GenerateStackAsyncResponse = ((handler_Response & {
    data?: entity_Run;
}));

export type GenerateStackAsyncError = (unknown);

export type PreviewStackAsyncData = {
    /**
     * The resources to import during the stack preview
     */
    body?: request_StackImportRequest;
    path: {
        /**
         * Stack ID
         */
        stackID: number;
    };
    query: {
        /**
         * Show detailed output
         */
        detail?: boolean;
        /**
         * Force the preview even when the stack is locked
         */
        force?: boolean;
        /**
         * Import existing resources during the stack preview
         */
        importResources?: boolean;
        /**
         * Output format. Choices are: json, default. Default to default output format in Kusion.
         */
        output?: string;
        /**
         * The Spec ID to use for the preview. Default to the last one generated.
         */
        specID?: string;
        /**
         * The target workspace to preview the spec in.
         */
        workspace: string;
    };
};

export type PreviewStackAsyncResponse = ((handler_Response & {
    data?: entity_Run;
}));

export type PreviewStackAsyncError = (unknown);

export type ListWorkspaceData = {
    query?: {
        /**
         * BackendID to filter workspaces by. Default to all
         */
        backendID?: number;
        /**
         * The current page to fetch. Default to 1
         */
        page?: number;
        /**
         * The size of the page. Default to 10
         */
        pageSize?: number;
    };
};

export type ListWorkspaceResponse = ((handler_Response & {
    data?: response_PaginatedWorkspaceResponse;
}));

export type ListWorkspaceError = (unknown);

export type CreateWorkspaceData = {
    /**
     * Created workspace
     */
    body: request_CreateWorkspaceRequest;
};

export type CreateWorkspaceResponse = ((handler_Response & {
    data?: entity_Workspace;
}));

export type CreateWorkspaceError = (unknown);

export type DeleteWorkspaceData = {
    path: {
        /**
         * Workspace ID
         */
        workspaceID: number;
    };
};

export type DeleteWorkspaceResponse = ((handler_Response & {
    data?: string;
}));

export type DeleteWorkspaceError = (unknown);

export type GetWorkspaceData = {
    path: {
        /**
         * Workspace ID
         */
        workspaceID: number;
    };
};

export type GetWorkspaceResponse = ((handler_Response & {
    data?: entity_Workspace;
}));

export type GetWorkspaceError = (unknown);

export type UpdateWorkspaceData = {
    /**
     * Updated workspace
     */
    body: request_UpdateWorkspaceRequest;
    path: {
        /**
         * Workspace ID
         */
        workspaceID: number;
    };
};

export type UpdateWorkspaceResponse = ((handler_Response & {
    data?: entity_Workspace;
}));

export type UpdateWorkspaceError = (unknown);

export type GetWorkspaceConfigsData = {
    path: {
        /**
         * Workspace ID
         */
        workspaceID: number;
    };
};

export type GetWorkspaceConfigsResponse = (request_WorkspaceConfigs);

export type GetWorkspaceConfigsError = (unknown);

export type UpdateWorkspaceConfigsData = {
    /**
     * Updated workspace configurations
     */
    body: request_WorkspaceConfigs;
    path: {
        /**
         * Workspace ID
         */
        workspaceID: number;
    };
};

export type UpdateWorkspaceConfigsResponse = (request_WorkspaceConfigs);

export type UpdateWorkspaceConfigsError = (unknown);

export type CreateWorkspaceModDepsData = {
    path: {
        /**
         * Workspace ID
         */
        workspaceID: number;
    };
};

export type CreateWorkspaceModDepsResponse = (string);

export type CreateWorkspaceModDepsError = (unknown);

export type ValidateWorkspaceConfigsData = {
    /**
     * Workspace configurations to be validated
     */
    body: request_WorkspaceConfigs;
};

export type ValidateWorkspaceConfigsResponse = (request_WorkspaceConfigs);

export type ValidateWorkspaceConfigsError = (unknown);